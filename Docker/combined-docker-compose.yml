# @format

version: "3.9"

networks:
  main:
    driver: bridge
  navidrome_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
  speedtest_network:
    driver: bridge

services:
  audiobookshelf:
    container_name: audiobookshelf
    environment:
      TZ: ${TZ}
    image: ghcr.io/advplyr/audiobookshelf:latest
    networks:
      - main
    ports:
      - "13378:80"
    restart: unless-stopped
    volumes:
      - ${MEDIA_PATH}/audiobooks:/audiobooks:rw
      - ${APPDATA_PATH}/audiobooks/config:/config:rw
      - ${APPDATA_PATH}/metadata:/metadata:rw
      - ${MEDIA_PATH}/podcasts:/podcasts:rw

  code-server:
    container_name: code-server
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    image: lscr.io/linuxserver/code-server:latest
    networks:
      - main
    ports:
      - "8443:8443"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/code/config:/config:rw
      - ${CODE_PATH}:/data:rw
      - ${COMPOSE_PATH}:/data/compose:rw
    working_dir: /data

  db:
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    image: postgres:15
    networks:
      - speedtest_network
    restart: always
    volumes:
      - speedtest-db:/var/lib/postgresql/data:rw

  doku:
    container_name: doku
    image: amerkurev/doku
    networks:
      - main
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - /:/hostroot:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  excalidraw:
    container_name: excalidraw
    image: excalidraw/excalidraw:latest
    networks:
      - main
    ports:
      - "5090:80"
    restart: unless-stopped
    stdin_open: true
    tty: true

  feishin:
    container_name: feishin
    image: ghcr.io/jeffvli/feishin:latest
    networks:
      - navidrome_network
    ports:
      - "9180:9180"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/feishin:/config:rw

  filebrowser:
    container_name: filebrowser
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
    image: filebrowser/filebrowser:s6
    networks:
      - main
    ports:
      - "8095:80"
    restart: unless-stopped
    volumes:
      - ${FILEBROWSER_PATH}/config/settings.json:/config/settings.json:rw
      - ${FILEBROWSER_PATH}/database/filebrowser.db:/database/filebrowser.db:rw
      - ${HOME_PATH}:/srv:rw

  flatnotes:
    container_name: flatnotes
    environment:
      FLATNOTES_AUTH_TYPE: password
      FLATNOTES_PASSWORD: ${FLATNOTES_PASSWORD}
      FLATNOTES_SECRET_KEY: ${FLATNOTES_SECRET_KEY}
      FLATNOTES_USERNAME: ${FLATNOTES_USERNAME}
      PGID: ${PGID}
      PUID: ${PUID}
    image: dullage/flatnotes:latest
    networks:
      - main
    ports:
      - "6080:8080"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/flatnote/data:/data:rw

  hedgedoc:
    container_name: hedgedoc
    environment:
      CMD_ALLOW_ORIGIN: ${CMD_ALLOW_ORIGIN}
      CMD_DOMAIN: ${CMD_DOMAIN}
      CMD_PORT: ${CMD_PORT}
      CMD_PROTOCOL_USESSL: ${CMD_PROTOCOL_USESSL}
      CMD_URL_ADDPORT: ${CMD_URL_ADDPORT}
      DB_HOST: mysql
      DB_NAME: ${DB_NAME}
      DB_PASS: ${DB_PASS}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    image: lscr.io/linuxserver/hedgedoc:latest
    networks:
      - main
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/hedgedoc/config:/config:rw

  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    networks:
      - main
    ports:
      - "7575:7575"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/homarr/configs:/app/data/configs:rw
      - ${APPDATA_PATH}/homarr/icons:/app/public/icons:rw
      - ${APPDATA_PATH}/homarr/data:/data:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw

  jellyfin:
    container_name: jellyfin
    environment:
      JELLYFIN_PublishedServerUrl: http://jellyfin:8096
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    image: lscr.io/linuxserver/jellyfin:latest
    networks:
      - main
    ports:
      - "1900:1900/udp"
      - "7359:7359/udp"
      - "8096:8096"
      - "8920:8920"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/jellyfin/config:/config:rw
      - ${MEDIA_PATH}/movies:/movies:rw
      - ${MEDIA_PATH}/podcasts:/podcasts:rw
      - ${MEDIA_PATH}/tv:/tv:rw

  mysql:
    container_name: mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
    image: mysql:latest
    networks:
      - main
    ports:
      - "3306:3306"
    restart: unless-stopped
    volumes:
      - ${MYSQL_DATA_PATH}:/var/lib/mysql:rw

  navidrome:
    container_name: navidrome
    environment:
      ND_LOGLEVEL: info
      ND_SCANSCHEDULE: 1h
      ND_SESSIONTIMEOUT: 24h
    image: deluan/navidrome:latest
    networks:
      - navidrome_network
    ports:
      - "4533:4533"
    restart: unless-stopped
    user: "${PUID}:${PGID}"
    volumes:
      - ${MEDIA_PATH}/music:/music:ro
      - ${APPDATA_PATH}/navidrome:/data:rw

  ombi:
    container_name: ombi
    environment:
      BASE_URL: /ombi
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    image: lscr.io/linuxserver/ombi:latest
    networks:
      - main
    ports:
      - "3579:3579"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/ombi/config:/config:rw

  pihole:
    cap_add:
      - NET_ADMIN
    container_name: pihole
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
    image: pihole/pihole:latest
    networks:
      - main
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "80:80/tcp"
    restart: unless-stopped
    volumes:
      - ${PIHOLE_PATH}/etc-dnsmasq.d:/etc/dnsmasq.d:rw
      - ${PIHOLE_PATH}/etc-pihole:/etc/pihole:rw

  pingvin-share:
    container_name: pingvin
    image: stonith404/pingvin-share
    networks:
      - main
    ports:
      - "3100:3000"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/file-share/data:/opt/app/backend/data:rw
      - ${APPDATA_PATH}/file-share/images:/opt/app/frontend/public/img:rw

  prowlarr:
    container_name: prowlarr
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    image: lscr.io/linuxserver/prowlarr:latest
    networks:
      - main
    ports:
      - "9696:9696"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/prowlarr/config:/config:rw

  qbittorrent:
    container_name: qbittorrent
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TORRENTING_PORT: "6881"
      TZ: ${TZ}
      WEBUI_PORT: "8080"
    image: lscr.io/linuxserver/qbittorrent:latest
    networks:
      - main
    ports:
      - "6881:6881"
      - "6881:6881/udp"
      - "8080:8080"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/qbittorrent/config:/config:rw
      - ${TORRENTS_PATH}:/torrents:rw

  radarr:
    container_name: radarr
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    image: lscr.io/linuxserver/radarr:latest
    networks:
      - main
    ports:
      - "7878:7878"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/radarr/config:/config:rw
      - ${MEDIA_PATH}:/data:rw
      - ${TORRENTS_PATH}:/torrents:rw

  requestrr:
    container_name: requestrr
    image: thomst08/requestrr
    networks:
      - main
    ports:
      - "4545:4545"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/requestrr:/root/config:rw

  sonarr:
    container_name: sonarr
    environment:
      PGID: ${PGID}
      PUID: ${PUID}
      TZ: ${TZ}
    image: lscr.io/linuxserver/sonarr:latest
    networks:
      - main
    ports:
      - "8989:8989"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/sonarr/config:/config:rw
      - ${MEDIA_PATH}:/data:rw
      - ${TORRENTS_PATH}:/torrents:rw

  speedtest-tracker:
    container_name: speedtest-tracker
    depends_on:
      - db
    environment:
      APP_DEBUG: "true"
      APP_KEY: ${SPEEDTEST_APP_KEY}
      APP_TIMEZONE: ${TZ}
      CHART_DATETIME_FORMAT: ""
      DATETIME_FORMAT: ""
      DB_CONNECTION: pgsql
      DB_DATABASE: ${POSTGRES_DB}
      DB_HOST: db
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_PORT: "5432"
      DB_USERNAME: ${POSTGRES_USER}
      DISPLAY_TIMEZONE: ${TZ}
      PGID: ${PGID}
      PUID: ${PUID}
      SPEEDTEST_SCHEDULE: "*/10 0-7 * * *"
      SPEEDTEST_SERVERS: ""
    image: lscr.io/linuxserver/speedtest-tracker:latest
    networks:
      - speedtest_network
    ports:
      - "8010:80"
      - "8413:443"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/speed-test/config:/config:rw
      - ${APPDATA_PATH}/speed-test/config/keys:/config/keys:rw

  transmission:
    container_name: transmission
    environment:
      HOST_WHITELIST: ""
      PASS: ${TRANSMISSION_PASSWORD}
      PEERPORT: ""
      PGID: ${PGID}
      PUID: ${PUID}
      TRANSMISSION_WEB_HOME: ""
      TZ: ${TZ}
      USER: ${TRANSMISSION_USER}
      WHITELIST: ""
    image: lscr.io/linuxserver/transmission:latest
    networks:
      - main
    ports:
      - "9091:9091"
      - "51413:51413"
      - "51413:51413/udp"
    restart: unless-stopped
    volumes:
      - ${APPDATA_PATH}/transmission:/config:rw
      - ${TORRENTS_PATH}/downloads:/downloads:rw
      - ${TORRENTS_PATH}/watch:/watch:rw

  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma:1
    networks:
      - main
    ports:
      - "3001:3001"
    restart: always
    volumes:
      - ${APPDATA_PATH}/uptime-kuma-data:/app/data:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw

  watchtower:
    command:
      - --cleanup=true
    container_name: watchtower
    image: containrrr/watchtower
    networks:
      - main
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw

volumes:
  speedtest-db:
